type st_14 = St_14_On|St_14_Off
type st_13 = St_13_On|St_13_Off
type st_12 = St_12_On|St_12_Off
type st_11 = St_11_On|St_11_Off
type st_10 = St_10_Stop|St_10_Fill
type st_9 = St_9_Stop|St_9_Moving
type st_8 = St_8_Foward|St_8_Back
type st_7 = St_7_Stop|St_7_Action
type st_6 = St_6_P4|St_6_Out
type st_5 = St_5_P4|St_5_Out
type st_4 = St_4_Stop|St_4_Action
type st_3 = St_3_Stop|St_3_Fill
type st_2 = St_2_Foward|St_2_Back
type st_1 = St_1_Stop|St_1_Moving
type st = St_On|St_Off
node sign(input : bool) returns (output : bool)
var nr_St_On : bool; ns_St_On_1 : bool; output_St_On : bool;
    nr_St_Off : bool; ns_St_Off_1 : bool; output_St_Off : bool;
    ck_1_1 : bool; r_St_On : bool; s_St_On_1 : bool; r_St_Off : bool;
    s_St_Off_1 : bool; ck_1_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  output_St_Off = false;
  nr_St_Off = false;
  ns_St_Off_1 = true;
  output_St_On = true;
  nr_St_On = false;
  ns_St_On_1 = false;
  output = merge ck_1_1 (true -> output_St_Off)(false -> output_St_On);
  ns_1 = merge ck_1_1 (true -> ns_St_Off_1)(false -> ns_St_On_1);
  nr = merge ck_1_1 (true -> nr_St_Off)(false -> nr_St_On);
  ck_1_2 = true fby ns_1;
  r_St_Off =
    if (input when true(ck_1_2)) then true else (pnr when true(ck_1_2));
  s_St_Off_1 = if (input when true(ck_1_2)) then false else true;
  r_St_On =
    if (input when false(ck_1_2)) then true else (pnr when false(ck_1_2));
  s_St_On_1 = if (input when false(ck_1_2)) then true else false;
  s_1 = merge ck_1_2 (true -> s_St_Off_1)(false -> s_St_On_1);
  r = merge ck_1_2 (true -> r_St_Off)(false -> r_St_On)
tel

node matting(start : bool; c1_matting : bool; c2_matting : bool)
returns (active : bool)
var nr_St_1_Moving : bool; ns_St_1_Moving_1 : bool;
    active_St_1_Moving : bool; nr_St_1_Stop : bool; ns_St_1_Stop_1 : bool;
    active_St_1_Stop : bool; ck_2_1 : bool; v : bool; r_St_1_Moving : bool;
    s_St_1_Moving_1 : bool; r_St_1_Stop : bool; s_St_1_Stop_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  active_St_1_Stop = false;
  nr_St_1_Stop = false;
  ns_St_1_Stop_1 = false;
  active_St_1_Moving = true;
  nr_St_1_Moving = false;
  ns_St_1_Moving_1 = true;
  active =
    merge ck_2_1 (true -> active_St_1_Moving)(false -> active_St_1_Stop);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Moving_1)(false -> ns_St_1_Stop_1);
  nr = merge ck_2_1 (true -> nr_St_1_Moving)(false -> nr_St_1_Stop);
  ck_1 = false fby ns_1;
  r_St_1_Stop = if v then true else (pnr when false(ck_1));
  s_St_1_Stop_1 = if v then true else false;
  v = ((start when false(ck_1)) & (c1_matting when false(ck_1)));
  r_St_1_Moving =
    if (c2_matting when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_1_Moving_1 = if (c2_matting when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_1_Moving_1)(false -> s_St_1_Stop_1);
  r = merge ck_1 (true -> r_St_1_Moving)(false -> r_St_1_Stop)
tel

node pneumatic(buffer : bool; c1_pneumatic : bool; c2_pneumatic : bool)
returns (active : bool)
var nr_St_2_Foward : bool; ns_St_2_Foward_1 : bool;
    active_St_2_Foward : bool; nr_St_2_Back : bool; ns_St_2_Back_1 : bool;
    active_St_2_Back : bool; ck_3_1 : bool; v : bool; r_St_2_Foward : bool;
    s_St_2_Foward_1 : bool; r_St_2_Back : bool; s_St_2_Back_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  active_St_2_Back = false;
  nr_St_2_Back = false;
  ns_St_2_Back_1 = true;
  active_St_2_Foward = true;
  nr_St_2_Foward = false;
  ns_St_2_Foward_1 = false;
  active =
    merge ck_3_1 (true -> active_St_2_Back)(false -> active_St_2_Foward);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Back_1)(false -> ns_St_2_Foward_1);
  nr = merge ck_3_1 (true -> nr_St_2_Back)(false -> nr_St_2_Foward);
  ck_1 = true fby ns_1;
  r_St_2_Back = if v then true else (pnr when true(ck_1));
  s_St_2_Back_1 = if v then false else true;
  v = ((buffer when true(ck_1)) & (c1_pneumatic when true(ck_1)));
  r_St_2_Foward =
    if (c2_pneumatic when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_2_Foward_1 = if (c2_pneumatic when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_2_Back_1)(false -> s_St_2_Foward_1);
  r = merge ck_1 (true -> r_St_2_Back)(false -> r_St_2_Foward)
tel

node bomb(p2 : bool; c1_bomb : bool; c2_bomb : bool) returns (active : bool)
var nr_St_3_Fill : bool; ns_St_3_Fill_1 : bool; active_St_3_Fill : bool;
    nr_St_3_Stop : bool; ns_St_3_Stop_1 : bool; active_St_3_Stop : bool;
    ck_4_1 : bool; v : bool; r_St_3_Fill : bool; s_St_3_Fill_1 : bool;
    r_St_3_Stop : bool; s_St_3_Stop_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  active_St_3_Stop = false;
  nr_St_3_Stop = false;
  ns_St_3_Stop_1 = false;
  active_St_3_Fill = true;
  nr_St_3_Fill = false;
  ns_St_3_Fill_1 = true;
  active = merge ck_4_1 (true -> active_St_3_Fill)(false -> active_St_3_Stop);
  ns_1 = merge ck_4_1 (true -> ns_St_3_Fill_1)(false -> ns_St_3_Stop_1);
  nr = merge ck_4_1 (true -> nr_St_3_Fill)(false -> nr_St_3_Stop);
  ck_1 = false fby ns_1;
  r_St_3_Stop = if v then true else (pnr when false(ck_1));
  s_St_3_Stop_1 = if v then true else false;
  v = ((p2 when false(ck_1)) & (c1_bomb when false(ck_1)));
  r_St_3_Fill =
    if (c2_bomb when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_3_Fill_1 = if (c2_bomb when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_3_Fill_1)(false -> s_St_3_Stop_1);
  r = merge ck_1 (true -> r_St_3_Fill)(false -> r_St_3_Stop)
tel

node capper(buffer : bool; c1_capper : bool; c2_capper : bool)
returns (active : bool)
var nr_St_4_Action : bool; ns_St_4_Action_1 : bool;
    active_St_4_Action : bool; nr_St_4_Stop : bool; ns_St_4_Stop_1 : bool;
    active_St_4_Stop : bool; ck_5_1 : bool; v : bool; r_St_4_Action : bool;
    s_St_4_Action_1 : bool; r_St_4_Stop : bool; s_St_4_Stop_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  active_St_4_Stop = false;
  nr_St_4_Stop = false;
  ns_St_4_Stop_1 = false;
  active_St_4_Action = true;
  nr_St_4_Action = false;
  ns_St_4_Action_1 = true;
  active =
    merge ck_5_1 (true -> active_St_4_Action)(false -> active_St_4_Stop);
  ns_1 = merge ck_5_1 (true -> ns_St_4_Action_1)(false -> ns_St_4_Stop_1);
  nr = merge ck_5_1 (true -> nr_St_4_Action)(false -> nr_St_4_Stop);
  ck_1 = false fby ns_1;
  r_St_4_Stop = if v then true else (pnr when false(ck_1));
  s_St_4_Stop_1 = if v then true else false;
  v = ((buffer when false(ck_1)) & (c1_capper when false(ck_1)));
  r_St_4_Action =
    if (c2_capper when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_4_Action_1 = if (c2_capper when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_4_Action_1)(false -> s_St_4_Stop_1);
  r = merge ck_1 (true -> r_St_4_Action)(false -> r_St_4_Stop)
tel

node robot(p4 : bool; c1_robot : bool; c2_robot : bool)
returns (active : bool)
var nr_St_5_Out : bool; ns_St_5_Out_1 : bool; active_St_5_Out : bool;
    nr_St_5_P4 : bool; ns_St_5_P4_1 : bool; active_St_5_P4 : bool;
    ck_6_1 : bool; v : bool; r_St_5_Out : bool; s_St_5_Out_1 : bool;
    r_St_5_P4 : bool; s_St_5_P4_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  active_St_5_P4 = false;
  nr_St_5_P4 = false;
  ns_St_5_P4_1 = false;
  active_St_5_Out = true;
  nr_St_5_Out = false;
  ns_St_5_Out_1 = true;
  active = merge ck_6_1 (true -> active_St_5_Out)(false -> active_St_5_P4);
  ns_1 = merge ck_6_1 (true -> ns_St_5_Out_1)(false -> ns_St_5_P4_1);
  nr = merge ck_6_1 (true -> nr_St_5_Out)(false -> nr_St_5_P4);
  ck_1 = false fby ns_1;
  r_St_5_P4 = if v then true else (pnr when false(ck_1));
  s_St_5_P4_1 = if v then true else false;
  v = ((p4 when false(ck_1)) & (c1_robot when false(ck_1)));
  r_St_5_Out =
    if (c2_robot when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_5_Out_1 = if (c2_robot when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_5_Out_1)(false -> s_St_5_P4_1);
  r = merge ck_1 (true -> r_St_5_Out)(false -> r_St_5_P4)
tel

node coresystem(p1_input : bool; p2_input : bool; p3_input : bool;
                 p4_input : bool; buffer : bool; b_full : bool;
                 capper_buffer : bool; b_capped : bool; out_buffer : bool)
returns (p1 : bool; p2 : bool; p3 : bool; p4 : bool; a_matting : bool;
          a_pneumatic : bool; a_bomb : bool; a_capper : bool; a_robot : bool)
contract
  var rule6 : bool; rule5 : bool; rule4 : bool; rule2 : bool; v : bool;
      v_1 : bool; v_2 : bool; v_3 : bool; v_4 : bool; v_5 : bool; v_6 : bool;
      v_7 : bool; v_8 : bool; v_9 : bool; v_10 : bool; v_11 : bool;
      v_12 : bool; v_13 : bool; v_14 : bool; v_15 : bool; v_16 : bool;
      v_17 : bool; v_18 : bool; v_19 : bool; v_20 : bool; v_21 : bool;
      v_22 : bool;
  let
    v = (p1 or p2);
    v_1 = (v or p3);
    v_2 = (v_1 or p4);
    v_3 = not(v_2);
    v_4 = (a_matting & v_3);
    rule6 = not(v_4);
    v_5 = (a_bomb & b_full);
    v_6 = not(v_5);
    v_7 = (a_capper & b_capped);
    v_8 = not(v_7);
    rule5 = (v_6 & v_8);
    v_9 = not(p2);
    v_10 = (a_bomb & v_9);
    v_11 = not(v_10);
    v_12 = not(p3);
    v_13 = (a_capper & v_12);
    v_14 = not(v_13);
    v_15 = (v_11 & v_14);
    v_16 = not(p4);
    v_17 = (a_robot & v_16);
    v_18 = not(v_17);
    rule4 = (v_15 & v_18);
    v_19 = (a_pneumatic & p1);
    rule2 = not(v_19);
    v_20 = (rule2 & rule4);
    v_21 = (v_20 & rule5);
    v_22 = (v_21 & rule6)
  tel
  assume true@ enforce v_22]
                 with (c2_robot : bool; c1_robot : bool; c2_capper : bool;
                        c1_capper : bool; c2_pneumatic : bool;
                        c1_pneumatic : bool; c2_matting : bool;
                        c1_matting : bool; c2_bomb : bool; c1_bomb : bool)
                 var nr_St_6_Out : bool; ns_St_6_Out_1 : bool;
                     active_4_St_6_Out : bool; nr_St_6_P4 : bool;
                     ns_St_6_P4_1 : bool; active_4_St_6_P4 : bool;
                     ck_23_1 : bool; v_30 : bool; r_St_6_Out : bool;
                     s_St_6_Out_1 : bool; r_St_6_P4 : bool;
                     s_St_6_P4_1 : bool; ck_22_1 : bool;
                     nr_1_St_7_Action : bool; ns_1_St_7_Action_1 : bool;
                     active_3_St_7_Action : bool; nr_1_St_7_Stop : bool;
                     ns_1_St_7_Stop_1 : bool; active_3_St_7_Stop : bool;
                     ck_21_1 : bool; v_29 : bool; r_1_St_7_Action : bool;
                     s_1_St_7_Action_1 : bool; r_1_St_7_Stop : bool;
                     s_1_St_7_Stop_1 : bool; ck_20_1 : bool;
                     nr_2_St_8_Foward : bool; ns_2_St_8_Foward_1 : bool;
                     active_2_St_8_Foward : bool; nr_2_St_8_Back : bool;
                     ns_2_St_8_Back_1 : bool; active_2_St_8_Back : bool;
                     ck_19_1 : bool; v_28 : bool; r_2_St_8_Foward : bool;
                     s_2_St_8_Foward_1 : bool; r_2_St_8_Back : bool;
                     s_2_St_8_Back_1 : bool; ck_18_1 : bool;
                     nr_3_St_9_Moving : bool; ns_3_St_9_Moving_1 : bool;
                     active_1_St_9_Moving : bool; nr_3_St_9_Stop : bool;
                     ns_3_St_9_Stop_1 : bool; active_1_St_9_Stop : bool;
                     ck_17_1 : bool; v_24 : bool; r_3_St_9_Moving : bool;
                     s_3_St_9_Moving_1 : bool; r_3_St_9_Stop : bool;
                     s_3_St_9_Stop_1 : bool; ck_16_1 : bool;
                     nr_4_St_10_Fill : bool; ns_4_St_10_Fill_1 : bool;
                     active_St_10_Fill : bool; nr_4_St_10_Stop : bool;
                     ns_4_St_10_Stop_1 : bool; active_St_10_Stop : bool;
                     ck_15_1 : bool; v_23 : bool; r_4_St_10_Fill : bool;
                     s_4_St_10_Fill_1 : bool; r_4_St_10_Stop : bool;
                     s_4_St_10_Stop_1 : bool; ck_14_1 : bool;
                     nr_5_St_11_On : bool; ns_5_St_11_On_1 : bool;
                     output_3_St_11_On : bool; nr_5_St_11_Off : bool;
                     ns_5_St_11_Off_1 : bool; output_3_St_11_Off : bool;
                     ck_13_1 : bool; r_5_St_11_On : bool;
                     s_5_St_11_On_1 : bool; r_5_St_11_Off : bool;
                     s_5_St_11_Off_1 : bool; ck_12_1 : bool;
                     nr_6_St_12_On : bool; ns_6_St_12_On_1 : bool;
                     output_2_St_12_On : bool; nr_6_St_12_Off : bool;
                     ns_6_St_12_Off_1 : bool; output_2_St_12_Off : bool;
                     ck_11_1 : bool; r_6_St_12_On : bool;
                     s_6_St_12_On_1 : bool; r_6_St_12_Off : bool;
                     s_6_St_12_Off_1 : bool; ck_10_1 : bool;
                     nr_7_St_13_On : bool; ns_7_St_13_On_1 : bool;
                     output_1_St_13_On : bool; nr_7_St_13_Off : bool;
                     ns_7_St_13_Off_1 : bool; output_1_St_13_Off : bool;
                     ck_9_1 : bool; r_7_St_13_On : bool;
                     s_7_St_13_On_1 : bool; r_7_St_13_Off : bool;
                     s_7_St_13_Off_1 : bool; ck_8_1 : bool;
                     nr_8_St_14_On : bool; ns_8_St_14_On_1 : bool;
                     output_St_14_On : bool; nr_8_St_14_Off : bool;
                     ns_8_St_14_Off_1 : bool; output_St_14_Off : bool;
                     ck_7_1 : bool; r_8_St_14_On : bool;
                     s_8_St_14_On_1 : bool; r_8_St_14_Off : bool;
                     s_8_St_14_Off_1 : bool; ck_1 : bool; v_27 : bool;
                     v_26 : bool; v_25 : bool; s_8_1 : bool; ns_8_1 : bool;
                     r_8 : bool; nr_8 : bool; pnr_8 : bool; s_7_1 : bool;
                     ns_7_1 : bool; r_7 : bool; nr_7 : bool; pnr_7 : bool;
                     s_6_1 : bool; ns_6_1 : bool; r_6 : bool; nr_6 : bool;
                     pnr_6 : bool; s_5_1 : bool; ns_5_1 : bool; r_5 : bool;
                     nr_5 : bool; pnr_5 : bool; s_4_1 : bool; ns_4_1 : bool;
                     r_4 : bool; nr_4 : bool; pnr_4 : bool; s_3_1 : bool;
                     ns_3_1 : bool; r_3 : bool; nr_3 : bool; pnr_3 : bool;
                     s_2_1 : bool; ns_2_1 : bool; r_2 : bool; nr_2 : bool;
                     pnr_2 : bool; s_1_1 : bool; ns_1_1 : bool; r_1 : bool;
                     nr_1 : bool; pnr_1 : bool; s_1_2 : bool; ns_1_2 : bool;
                     r : bool; nr : bool; pnr : bool; p4_1 : bool;
                     c1_robot_1 : bool; c2_robot_1 : bool; active_4 : bool;
                     buffer_2 : bool; c1_capper_1 : bool; c2_capper_1 : bool;
                     active_3 : bool; buffer_1 : bool; c1_pneumatic_1 : bool;
                     c2_pneumatic_1 : bool; active_2 : bool; start : bool;
                     c1_matting_1 : bool; c2_matting_1 : bool;
                     active_1 : bool; p2_1 : bool; c1_bomb_1 : bool;
                     c2_bomb_1 : bool; active : bool; input_3 : bool;
                     output_3 : bool; input_2 : bool; output_2 : bool;
                     input_1 : bool; output_1 : bool; input : bool;
                     output : bool;
  let
    p4_1 = p4;
    c1_robot_1 = c1_robot;
    c2_robot_1 = c2_robot;
    pnr = false fby nr;
    ck_23_1 = s_1_2;
    active_4_St_6_P4 = false;
    nr_St_6_P4 = false;
    ns_St_6_P4_1 = false;
    active_4_St_6_Out = true;
    nr_St_6_Out = false;
    ns_St_6_Out_1 = true;
    active_4 =
      merge ck_23_1 (true -> active_4_St_6_Out)(false -> active_4_St_6_P4);
    ns_1_2 = merge ck_23_1 (true -> ns_St_6_Out_1)(false -> ns_St_6_P4_1);
    nr = merge ck_23_1 (true -> nr_St_6_Out)(false -> nr_St_6_P4);
    ck_22_1 = false fby ns_1_2;
    r_St_6_P4 = if v_30 then true else (pnr when false(ck_22_1));
    s_St_6_P4_1 = if v_30 then true else false;
    v_30 = ((p4_1 when false(ck_22_1)) & (c1_robot_1 when false(ck_22_1)));
    r_St_6_Out =
      if (c2_robot_1 when true(ck_22_1))
      then true
      else (pnr when true(ck_22_1));
    s_St_6_Out_1 = if (c2_robot_1 when true(ck_22_1)) then false else true;
    s_1_2 = merge ck_22_1 (true -> s_St_6_Out_1)(false -> s_St_6_P4_1);
    r = merge ck_22_1 (true -> r_St_6_Out)(false -> r_St_6_P4);
    buffer_2 = capper_buffer;
    c1_capper_1 = c1_capper;
    c2_capper_1 = c2_capper;
    pnr_1 = false fby nr_1;
    ck_21_1 = s_1_1;
    active_3_St_7_Stop = false;
    nr_1_St_7_Stop = false;
    ns_1_St_7_Stop_1 = false;
    active_3_St_7_Action = true;
    nr_1_St_7_Action = false;
    ns_1_St_7_Action_1 = true;
    active_3 =
      merge ck_21_1
        (true -> active_3_St_7_Action)(false -> active_3_St_7_Stop);
    ns_1_1 =
      merge ck_21_1 (true -> ns_1_St_7_Action_1)(false -> ns_1_St_7_Stop_1);
    nr_1 = merge ck_21_1 (true -> nr_1_St_7_Action)(false -> nr_1_St_7_Stop);
    ck_20_1 = false fby ns_1_1;
    r_1_St_7_Stop = if v_29 then true else (pnr_1 when false(ck_20_1));
    s_1_St_7_Stop_1 = if v_29 then true else false;
    v_29 =
      ((buffer_2 when false(ck_20_1)) & (c1_capper_1 when false(ck_20_1)));
    r_1_St_7_Action =
      if (c2_capper_1 when true(ck_20_1))
      then true
      else (pnr_1 when true(ck_20_1));
    s_1_St_7_Action_1 =
      if (c2_capper_1 when true(ck_20_1)) then false else true;
    s_1_1 =
      merge ck_20_1 (true -> s_1_St_7_Action_1)(false -> s_1_St_7_Stop_1);
    r_1 = merge ck_20_1 (true -> r_1_St_7_Action)(false -> r_1_St_7_Stop);
    buffer_1 = buffer;
    c1_pneumatic_1 = c1_pneumatic;
    c2_pneumatic_1 = c2_pneumatic;
    pnr_2 = false fby nr_2;
    ck_19_1 = s_2_1;
    active_2_St_8_Back = false;
    nr_2_St_8_Back = false;
    ns_2_St_8_Back_1 = true;
    active_2_St_8_Foward = true;
    nr_2_St_8_Foward = false;
    ns_2_St_8_Foward_1 = false;
    active_2 =
      merge ck_19_1
        (true -> active_2_St_8_Back)(false -> active_2_St_8_Foward);
    ns_2_1 =
      merge ck_19_1 (true -> ns_2_St_8_Back_1)(false -> ns_2_St_8_Foward_1);
    nr_2 = merge ck_19_1 (true -> nr_2_St_8_Back)(false -> nr_2_St_8_Foward);
    ck_18_1 = true fby ns_2_1;
    r_2_St_8_Back = if v_28 then true else (pnr_2 when true(ck_18_1));
    s_2_St_8_Back_1 = if v_28 then false else true;
    v_28 =
      ((buffer_1 when true(ck_18_1)) & (c1_pneumatic_1 when true(ck_18_1)));
    r_2_St_8_Foward =
      if (c2_pneumatic_1 when false(ck_18_1))
      then true
      else (pnr_2 when false(ck_18_1));
    s_2_St_8_Foward_1 =
      if (c2_pneumatic_1 when false(ck_18_1)) then true else false;
    s_2_1 =
      merge ck_18_1 (true -> s_2_St_8_Back_1)(false -> s_2_St_8_Foward_1);
    r_2 = merge ck_18_1 (true -> r_2_St_8_Back)(false -> r_2_St_8_Foward);
    start = not(v_27);
    v_27 = (v_26 or a_pneumatic);
    v_26 = (v_25 or a_bomb);
    v_25 = (a_robot or a_capper);
    c1_matting_1 = c1_matting;
    c2_matting_1 = c2_matting;
    pnr_3 = false fby nr_3;
    ck_17_1 = s_3_1;
    active_1_St_9_Stop = false;
    nr_3_St_9_Stop = false;
    ns_3_St_9_Stop_1 = false;
    active_1_St_9_Moving = true;
    nr_3_St_9_Moving = false;
    ns_3_St_9_Moving_1 = true;
    active_1 =
      merge ck_17_1
        (true -> active_1_St_9_Moving)(false -> active_1_St_9_Stop);
    ns_3_1 =
      merge ck_17_1 (true -> ns_3_St_9_Moving_1)(false -> ns_3_St_9_Stop_1);
    nr_3 = merge ck_17_1 (true -> nr_3_St_9_Moving)(false -> nr_3_St_9_Stop);
    ck_16_1 = false fby ns_3_1;
    r_3_St_9_Stop = if v_24 then true else (pnr_3 when false(ck_16_1));
    s_3_St_9_Stop_1 = if v_24 then true else false;
    v_24 = ((start when false(ck_16_1)) & (c1_matting_1 when false(ck_16_1)));
    r_3_St_9_Moving =
      if (c2_matting_1 when true(ck_16_1))
      then true
      else (pnr_3 when true(ck_16_1));
    s_3_St_9_Moving_1 =
      if (c2_matting_1 when true(ck_16_1)) then false else true;
    s_3_1 =
      merge ck_16_1 (true -> s_3_St_9_Moving_1)(false -> s_3_St_9_Stop_1);
    r_3 = merge ck_16_1 (true -> r_3_St_9_Moving)(false -> r_3_St_9_Stop);
    p2_1 = p2;
    c1_bomb_1 = c1_bomb;
    c2_bomb_1 = c2_bomb;
    pnr_4 = false fby nr_4;
    ck_15_1 = s_4_1;
    active_St_10_Stop = false;
    nr_4_St_10_Stop = false;
    ns_4_St_10_Stop_1 = false;
    active_St_10_Fill = true;
    nr_4_St_10_Fill = false;
    ns_4_St_10_Fill_1 = true;
    active =
      merge ck_15_1 (true -> active_St_10_Fill)(false -> active_St_10_Stop);
    ns_4_1 =
      merge ck_15_1 (true -> ns_4_St_10_Fill_1)(false -> ns_4_St_10_Stop_1);
    nr_4 = merge ck_15_1 (true -> nr_4_St_10_Fill)(false -> nr_4_St_10_Stop);
    ck_14_1 = false fby ns_4_1;
    r_4_St_10_Stop = if v_23 then true else (pnr_4 when false(ck_14_1));
    s_4_St_10_Stop_1 = if v_23 then true else false;
    v_23 = ((p2_1 when false(ck_14_1)) & (c1_bomb_1 when false(ck_14_1)));
    r_4_St_10_Fill =
      if (c2_bomb_1 when true(ck_14_1))
      then true
      else (pnr_4 when true(ck_14_1));
    s_4_St_10_Fill_1 = if (c2_bomb_1 when true(ck_14_1)) then false else true;
    s_4_1 =
      merge ck_14_1 (true -> s_4_St_10_Fill_1)(false -> s_4_St_10_Stop_1);
    r_4 = merge ck_14_1 (true -> r_4_St_10_Fill)(false -> r_4_St_10_Stop);
    input_3 = p4_input;
    pnr_5 = false fby nr_5;
    ck_13_1 = s_5_1;
    output_3_St_11_Off = false;
    nr_5_St_11_Off = false;
    ns_5_St_11_Off_1 = true;
    output_3_St_11_On = true;
    nr_5_St_11_On = false;
    ns_5_St_11_On_1 = false;
    output_3 =
      merge ck_13_1 (true -> output_3_St_11_Off)(false -> output_3_St_11_On);
    ns_5_1 =
      merge ck_13_1 (true -> ns_5_St_11_Off_1)(false -> ns_5_St_11_On_1);
    nr_5 = merge ck_13_1 (true -> nr_5_St_11_Off)(false -> nr_5_St_11_On);
    ck_12_1 = true fby ns_5_1;
    r_5_St_11_Off =
      if (input_3 when true(ck_12_1))
      then true
      else (pnr_5 when true(ck_12_1));
    s_5_St_11_Off_1 = if (input_3 when true(ck_12_1)) then false else true;
    r_5_St_11_On =
      if (input_3 when false(ck_12_1))
      then true
      else (pnr_5 when false(ck_12_1));
    s_5_St_11_On_1 = if (input_3 when false(ck_12_1)) then true else false;
    s_5_1 = merge ck_12_1 (true -> s_5_St_11_Off_1)(false -> s_5_St_11_On_1);
    r_5 = merge ck_12_1 (true -> r_5_St_11_Off)(false -> r_5_St_11_On);
    input_2 = p3_input;
    pnr_6 = false fby nr_6;
    ck_11_1 = s_6_1;
    output_2_St_12_Off = false;
    nr_6_St_12_Off = false;
    ns_6_St_12_Off_1 = true;
    output_2_St_12_On = true;
    nr_6_St_12_On = false;
    ns_6_St_12_On_1 = false;
    output_2 =
      merge ck_11_1 (true -> output_2_St_12_Off)(false -> output_2_St_12_On);
    ns_6_1 =
      merge ck_11_1 (true -> ns_6_St_12_Off_1)(false -> ns_6_St_12_On_1);
    nr_6 = merge ck_11_1 (true -> nr_6_St_12_Off)(false -> nr_6_St_12_On);
    ck_10_1 = true fby ns_6_1;
    r_6_St_12_Off =
      if (input_2 when true(ck_10_1))
      then true
      else (pnr_6 when true(ck_10_1));
    s_6_St_12_Off_1 = if (input_2 when true(ck_10_1)) then false else true;
    r_6_St_12_On =
      if (input_2 when false(ck_10_1))
      then true
      else (pnr_6 when false(ck_10_1));
    s_6_St_12_On_1 = if (input_2 when false(ck_10_1)) then true else false;
    s_6_1 = merge ck_10_1 (true -> s_6_St_12_Off_1)(false -> s_6_St_12_On_1);
    r_6 = merge ck_10_1 (true -> r_6_St_12_Off)(false -> r_6_St_12_On);
    input_1 = p2_input;
    pnr_7 = false fby nr_7;
    ck_9_1 = s_7_1;
    output_1_St_13_Off = false;
    nr_7_St_13_Off = false;
    ns_7_St_13_Off_1 = true;
    output_1_St_13_On = true;
    nr_7_St_13_On = false;
    ns_7_St_13_On_1 = false;
    output_1 =
      merge ck_9_1 (true -> output_1_St_13_Off)(false -> output_1_St_13_On);
    ns_7_1 =
      merge ck_9_1 (true -> ns_7_St_13_Off_1)(false -> ns_7_St_13_On_1);
    nr_7 = merge ck_9_1 (true -> nr_7_St_13_Off)(false -> nr_7_St_13_On);
    ck_8_1 = true fby ns_7_1;
    r_7_St_13_Off =
      if (input_1 when true(ck_8_1)) then true else (pnr_7 when true(ck_8_1));
    s_7_St_13_Off_1 = if (input_1 when true(ck_8_1)) then false else true;
    r_7_St_13_On =
      if (input_1 when false(ck_8_1))
      then true
      else (pnr_7 when false(ck_8_1));
    s_7_St_13_On_1 = if (input_1 when false(ck_8_1)) then true else false;
    s_7_1 = merge ck_8_1 (true -> s_7_St_13_Off_1)(false -> s_7_St_13_On_1);
    r_7 = merge ck_8_1 (true -> r_7_St_13_Off)(false -> r_7_St_13_On);
    input = p1_input;
    pnr_8 = false fby nr_8;
    ck_7_1 = s_8_1;
    output_St_14_Off = false;
    nr_8_St_14_Off = false;
    ns_8_St_14_Off_1 = true;
    output_St_14_On = true;
    nr_8_St_14_On = false;
    ns_8_St_14_On_1 = false;
    output =
      merge ck_7_1 (true -> output_St_14_Off)(false -> output_St_14_On);
    ns_8_1 =
      merge ck_7_1 (true -> ns_8_St_14_Off_1)(false -> ns_8_St_14_On_1);
    nr_8 = merge ck_7_1 (true -> nr_8_St_14_Off)(false -> nr_8_St_14_On);
    ck_1 = true fby ns_8_1;
    r_8_St_14_Off =
      if (input when true(ck_1)) then true else (pnr_8 when true(ck_1));
    s_8_St_14_Off_1 = if (input when true(ck_1)) then false else true;
    r_8_St_14_On =
      if (input when false(ck_1)) then true else (pnr_8 when false(ck_1));
    s_8_St_14_On_1 = if (input when false(ck_1)) then true else false;
    s_8_1 = merge ck_1 (true -> s_8_St_14_Off_1)(false -> s_8_St_14_On_1);
    r_8 = merge ck_1 (true -> r_8_St_14_Off)(false -> r_8_St_14_On);
    p1 = output;
    p2 = output_1;
    p3 = output_2;
    p4 = output_3;
    a_bomb = active;
    a_matting = active_1;
    a_pneumatic = active_2;
    a_capper = active_3;
    a_robot = active_4
  tel

