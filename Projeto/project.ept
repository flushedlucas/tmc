node sign (input: bool) returns (output: bool)
let
	automaton
		state Off do
			output = false;
		unless input then On

		state On do
			output = true;
		unless input then Off
	end
tel

node matting (start, finish, c1_matting, c2_matting: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless start & c1_matting then Moving

		state Moving do
			active = true;
		unless finish or c2_matting then Stop
	end
tel

node coresystem(p1_input, p2_input, p3_input, p4_input, start, finish: bool) returns (p1, p2, p3, p4, a_matting: bool)
contract
		var 
			rule6: bool;

		let
			rule6 = (a_matting) & not (p1 or p2 or p3 or p4);
		tel

		enforce not rule6
			with (c1_matting, c2_matting: bool)

let
	p1 = inlined sign(p1_input);
	p2 = inlined sign(p2_input);
	p3 = inlined sign(p3_input);
	p4 = inlined sign(p4_input);
	a_matting = inlined matting(start, finish, c1_matting, c2_matting);
tel