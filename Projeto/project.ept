node sign (input: bool) returns (output: bool)
let
	automaton
		state Off do
			output = false;
		unless input then On

		state On do
			output = true;
		unless input then Off
	end
tel

node matting (start, c1_matting, c2_matting: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless start & c1_matting then Moving

		state Moving do
			active = true;
		unless c2_matting then Stop
	end
tel

node pneumatic(buffer, c1_pneumatic, c2_pneumatic: bool) returns (active: bool)
let 
	automaton
		state Back do 
			active = false;
		unless buffer & c1_pneumatic then Foward


		state Foward do
			active = true;
		unless c2_pneumatic then Back

	end
tel

node bomb (p2, c1_bomb, c2_bomb: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless p2 & c1_bomb then Fill

		state Fill do
			active = true;
		unless c2_bomb then Stop
	end
tel

node capper (buffer, c1_capper, c2_capper: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless buffer & c1_capper then Action

		state Action do
			active = true;
		unless c2_capper then Stop
	end
tel

node robot (p4, c1_robot, c2_robot: bool) returns (active: bool)
let
	automaton
		state P4 do
			active = false;
		unless p4 & c1_robot then Out

		state Out do
			active = true;
		unless c2_robot then P4
	end
tel

node priority ( a_input: bool) returns (active: bool)
let
	automaton
		state Off do
			active = false;
		unless a_input then On

		state On do
			active = true;
		unless not (a_input) then Off
	end
tel

node coresystem(p1_input, p2_input, p3_input, p4_input, buffer, b_full, capper_buffer,b_capped, out_buffer : bool) returns (p1, p2, p3, p4, a_priority, a_matting , a_pneumatic, a_bomb, a_capper, a_robot: bool)
contract
		var 
			rule2, rule4, rule5, rule6: bool;

		let
			rule2 = not (a_pneumatic & p1);
			rule4 = not (a_bomb & not p2) & not (a_capper & not p3) & not (a_robot & not p4);
			rule5 = not (a_bomb & b_full) & not(a_capper & b_capped);
			rule6 = not ((a_matting) & not (p1 or p2 or p3 or p4));
		tel

		enforce  rule2 & rule4 & rule5 & rule6
			with (c1_bomb, c2_bomb, c1_matting, c2_matting, c1_pneumatic, c2_pneumatic, c1_capper, c2_capper, c1_robot, c2_robot: bool)

let
	p1 = inlined sign(p1_input);
	p2 = inlined sign(p2_input);
	p3 = inlined sign(p3_input);
	p4 = inlined sign(p4_input);
	
	a_bomb = inlined bomb(p2, c1_bomb, c2_bomb);
	a_matting = inlined matting(not (a_robot or a_capper or a_bomb or a_pneumatic), c1_matting, c2_matting);
	a_pneumatic = inlined pneumatic(buffer, c1_pneumatic, c2_pneumatic);
	a_capper = inlined capper(capper_buffer, c1_capper, c2_capper);
	a_robot = inlined robot(p4, c1_robot, c2_robot);
	a_priority = inlined priority(a_robot or a_capper or a_bomb or a_pneumatic);
tel