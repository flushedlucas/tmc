node sign (input: bool) returns (output: bool)
let
	automaton
		state Off do
			output = false;
		unless input then On

		state On do
			output = true;
		unless input then Off
	end
tel

node matting (start, finish, c1_matting, c2_matting: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless start & c1_matting then Moving

		state Moving do
			active = true;
		unless finish or c2_matting then Stop
	end
tel

node pneumatic(buffer, p1, c1_pneumatic, c2_pneumatic: bool) returns (active: bool)
let 
	automaton
		state Back do 
			active = false;
		unless buffer & not p1 & c1_pneumatic then Foward


		state Foward do
			active = true;
		unless c2_pneumatic or p1 then Back

	end
tel

node bomb (p2, b_full, c_bomb: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless p2 & not b_full & c_bomb then Fill

		state Fill do
			active = true;
		unless b_full then Stop
	end
tel

node capper (buffer, p3, b_capped, c_capper: bool) returns (active: bool)
let
	automaton
		state Stop do
			active = false;
		unless buffer & p3 & not b_capped & c_capper then Action

		state Action do
			active = true;
		unless b_capped then Stop
	end
tel

node robot (p4, out_buffer, c_robot: bool) returns (active: bool)
let
	automaton
		state P4 do
			active = false;
		unless p4 & c_robot then Out

		state Out do
			active = true;
		unless out_buffer then P4
	end
tel

node coresystem(p1_input, p2_input, p3_input, p4_input, start, finish , buffer, b_full, capper_buffer,b_capped, out_buffer : bool) returns (p1, p2, p3, p4, a_matting , a_pneumatic, a_bomb, a_capper, a_robot: bool)
contract
		var 
			rule1, rule6: bool;

		let
			rule1 = not (a_matting & (a_pneumatic or a_bomb or a_capper or a_robot));
			rule6 = not ((a_matting) & not (p1 or p2 or p3 or p4));
		tel

		enforce rule1 & rule6
			with (c1_matting, c2_matting , c1_pneumatic, c2_pneumatic, c_bomb, c_capper, c_robot : bool)

let
	p1 = inlined sign(p1_input);
	p2 = inlined sign(p2_input);
	p3 = inlined sign(p3_input);
	p4 = inlined sign(p4_input);
	a_matting = inlined matting(start, finish, c1_matting, c2_matting);
	a_pneumatic = inlined pneumatic(buffer, p1, c1_pneumatic, c2_pneumatic);
	a_bomb = inlined bomb(p2, b_full, c_bomb);
	a_capper = inlined capper(capper_buffer, p3, b_capped, c_capper);
	a_robot = inlined robot(p4, out_buffer, c_robot);
tel